name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to production'
        required: true
        type: boolean
        default: false

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.18.0'
  REGISTRY: ghcr.io
  REPO_OWNER: ${{ github.repository_owner }}

permissions:
  contents: read
  packages: write
  checks: write
  pull-requests: write

jobs:
  # ============================================================================
  # JOB 1: TESTES NODE.JS/TYPESCRIPT
  # ============================================================================
  test:
    name: Test All Projects
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: tickets
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d tickets"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Type check
        run: pnpm check-types

      - name: Run Tests with Coverage and JUnit
        run: |
          # Run the package test script (uses jest.config) and ask for coverage outputs.
          # jest-junit reporter is configured in jest.config.ts, so we only need to
          # pass coverage flags here. The JEST_JUNIT_* env vars instruct the reporter
          # where to write the junit XML.
          pnpm --filter=web run test --runInBand --coverage \
            --coverageReporters=cobertura \
            --coverageReporters=json-summary \
            --coverageReporters=lcov \
            --coverageReporters=text
        env:
          JEST_JUNIT_OUTPUT_DIR: ./apps/web/reports
          JEST_JUNIT_OUTPUT_NAME: junit.xml
        continue-on-error: true

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            apps/web/reports/**/*.xml
            apps/web/reports/junit.xml
            **/test-results/**/*.xml
            **/junit.xml
          check_name: 'Test Results (Node.js)'
          comment_title: 'ðŸ§ª Test Results'
          comment_mode: always

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: always()
        with:
          filename: apps/web/coverage/cobertura-coverage.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && always()
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            apps/web/coverage/**
            apps/web/coverage/lcov.info
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            apps/web/reports/**/*.xml
            apps/web/test-results/**/*.xml
            apps/web/junit.xml
            **/test-results/
            **/junit.xml
          retention-days: 30

  # ============================================================================
  # JOB 2: TESTES JAVA
  # ============================================================================
  test-java:
    name: Test Java API
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: tickets
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d tickets"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-

      - name: Run Tests with Reports
        working-directory: apps/api-java
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/tickets
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
          SPRING_JPA_HIBERNATE_DDL_AUTO: create-drop
        run: ./mvnw -B clean verify jacoco:report

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: |
            apps/api-java/target/surefire-reports/**/*.xml
            apps/api-java/target/failsafe-reports/**/*.xml
          check_name: 'Test Results (Java)'
          comment_title: 'â˜• Java Test Results'

      - name: JaCoCo Code Coverage Report
        id: jacoco_reporter
        uses: PavanMudigonda/jacoco-reporter@v4.9
        if: always()
        with:
          coverage_results_path: apps/api-java/target/site/jacoco/jacoco.xml
          coverage_report_name: Coverage (Java)
          coverage_report_title: JaCoCo Coverage Report
          github_token: ${{ secrets.GITHUB_TOKEN }}
          skip_check_run: false
          minimum_coverage: 60
          fail_below_threshold: false
          publish_only_summary: false

      - name: Upload Java Coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: java-coverage-report
          path: apps/api-java/target/site/jacoco/
          retention-days: 30

      - name: Upload Java Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: java-test-results
          path: |
            apps/api-java/target/surefire-reports/
            apps/api-java/target/failsafe-reports/
          retention-days: 30

  # ============================================================================
  # JOB 3: BUILD ARTIFACTS
  # ============================================================================
  build:
    name: Build Artifacts
    runs-on: ubuntu-latest
    needs: [test, test-java]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Cache pnpm
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Web
        run: pnpm --filter web build
        env:
          NEXT_PUBLIC_API_URL: /api

      - name: List Web Build Output (debug)
        run: |
          echo "Listing apps/web content"
          ls -la apps/web || true
          echo "Listing apps/web/.next (if exists)"
          if [ -d "apps/web/.next" ]; then
            echo "Found .next"
            find apps/web/.next -type f | wc -l || true
            du -sh apps/web/.next || true
            ls -la apps/web/.next || true
          else
            echo "No .next directory"
          fi

      - name: Upload Web Build
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: apps/web/.next/
          if-no-files-found: error
          retention-days: 7
          include-hidden-files: true

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build Java API
        working-directory: apps/api-java
        run: ./mvnw -B clean package -DskipTests

      - name: Upload Java JAR
        uses: actions/upload-artifact@v4
        with:
          name: java-jar
          path: apps/api-java/target/*.jar
          retention-days: 1

  # ============================================================================
  # JOB 4: BUILD & PUSH DOCKER IMAGES
  # ============================================================================
  docker:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [app-sql, web, nginx, api-java]
        include:
          - service: app-sql
            context: .
            dockerfile: docker/app-sql/Dockerfile
            needs-artifact: false
          - service: web
            context: .
            dockerfile: docker/web/Dockerfile
            needs-artifact: true
            artifact-name: web-build
            artifact-path: apps/web/.next
          - service: nginx
            context: .
            dockerfile: docker/nginx/Dockerfile
            needs-artifact: false
          - service: api-java
            context: .
            dockerfile: docker/api-java/Dockerfile
            needs-artifact: true
            artifact-name: java-jar
            artifact-path: apps/api-java/target
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact (${{ matrix.service }})
        if: matrix.needs-artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase repo owner
        # use bash parameter expansion to lowercase the owner and expose it to subsequent steps
        run: |
          echo "REPO_OWNER_LOWER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
        env:
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/tickets-${{ matrix.service }}
          tags: |
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/tickets-${{ matrix.service }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.REPO_OWNER_LOWER }}/tickets-${{ matrix.service }}:buildcache,mode=max
          build-args: |
            NEXT_PUBLIC_API_URL=/api

  # ============================================================================
  # JOB 5: DEPLOY (MANUAL)
  # ============================================================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEPLOY_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy via SSH
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REGISTRY: ${{ env.REGISTRY }}
          REPO_OWNER: ${{ env.REPO_OWNER }}
          ENV_PRODUCTION: ${{ secrets.ENV_PRODUCTION }}
        run: |
          ssh -o StrictHostKeyChecking=no ${DEPLOY_USER}@${DEPLOY_HOST} << 'ENDSSH'
            set -euo pipefail
            
            PROJECT_DIR="${HOME}/tickets-transporte-publico"
            DEPLOY_SCRIPT="${PROJECT_DIR}/scripts/deploy.sh"
            
            mkdir -p ${PROJECT_DIR}/scripts
            cd ${PROJECT_DIR}
            
            if [ ! -f "${DEPLOY_SCRIPT}" ]; then
              echo "ðŸ“¥ Downloading deploy script..."
              curl -fsSL -H "Authorization: token '"$GITHUB_TOKEN"'" \
                -H "Accept: application/vnd.github.v3.raw" \
                "https://api.github.com/repos/${{ github.repository }}/contents/scripts/deploy.sh" \
                -o "${DEPLOY_SCRIPT}"
              chmod +x "${DEPLOY_SCRIPT}"
            fi
            
            echo "ðŸš€ Starting deployment..."
            export REGISTRY="'"${REGISTRY}"'"
            export REPO_OWNER="'"${REPO_OWNER}"'"
            export GITHUB_TOKEN="'"${GITHUB_TOKEN}"'"
            export ENV_PRODUCTION="'"${ENV_PRODUCTION}"'"
            bash "${DEPLOY_SCRIPT}"
          ENDSSH

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [test, test-java]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate Quality Report
        run: |
          echo "# ðŸ“Š Quality Summary Report" > summary.md
          echo "" >> summary.md
          echo "## Test Results" >> summary.md
          echo "- Node.js Tests: ${{ needs.test.result }}" >> summary.md
          echo "- Java Tests: ${{ needs.test-java.result }}" >> summary.md
          echo "" >> summary.md
          echo "## Artifacts Generated" >> summary.md
          echo "- Coverage Reports: âœ…" >> summary.md
          echo "- Test Results: âœ…" >> summary.md
          echo "" >> summary.md
          echo "View detailed reports in the Actions artifacts section." >> summary.md

      - name: Add to Job Summary
        run: cat summary.md >> $GITHUB_STEP_SUMMARY